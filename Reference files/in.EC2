# Pure Si crystal, structure created by LAMMPS, qeq on

units		metal
atom_style	charge
dimension	3
# I think we need to do for a thin film of Si.
# may be for a slab. So we cannot use periodic boundary condition. 
# changing from 'p p p' to 's s s'
boundary	s s s 

lattice  		diamond 5.43
region			box block 0 48 0 41 0 8
create_box		5 box
create_atoms 1 region box

mass 1 28.0855 # mass of Si
mass 3 28.0855 # mass of Si
mass 4 28.0855 # mass of Si
mass 5 28.0855 # mass of Si
mass 2 28.0855 # mass of Si

# i assume the initial charge is zero for every atom
# then, qeq optimizes the charge and assign to each atom
set type 1 charge 0.00
set type 2 charge 0.00
set type 3 charge 0.00
set type 4 charge 0.00
set type 5 charge 0.00



# charge optimization
fix 	q all qeq/comb 100 0.0001 file qeq.txt 


# regions
region bot block INF INF INF 10.0 INF INF units box
group bot region bot
set group bot type 2

region top block INF INF 212.63 INF INF INF units box
group top region top
set group top type 3

region left block INF 10.0 INF INF INF INF units box
group left region left

region right block 250.64 INF INF INF INF INF units box
group right region right

region leftlower block INF 48.87 10.0 111.5 INF INF units box
group ll region leftlower
set group ll type 4

region leftupper block INF 48.87 111.5 212.63 INF INF units box
group lu region leftupper
set group lu type 5

neighbor	0.3 bin
neigh_modify	every 1 delay 0 check yes 

pair_style	comb
pair_coeff	* * ffield.comb Si Si Si Si Si

compute pe all pe/atom
compute pep all pe/atom pair
#compute peb all pe/atom bond
#compute pea all pe/atom angle
#compute ped all pe/atom dihedral
#compute pei all pe/atom improper
#compute pek all pe/atom kspace
#compute pef all pe/atom fix




#compute clc all coul/atom
#compute ang all angle
#compute bnd all bond
#compute dhdrl all dihedral
#compute impr all improper
compute prv all pair comb 2 evdwl
compute prc all pair comb 2 ecoul



variable qa atom q
compute qt all reduce sum v_qa 
compute stress all stress/atom NULL
compute SXX all reduce sum c_stress[1]
compute SYY all reduce sum c_stress[2]
compute SZZ all reduce sum c_stress[3]
compute SXY all reduce sum c_stress[4]
compute SXZ all reduce sum c_stress[5]
compute SYZ all reduce sum c_stress[6]

neigh_modify exclude group ll lu


#fix 1 all nvt temp 300 300 0.005 

variable PXX equal "c_SXX/(10000 * vol)"
variable PYY equal "c_SYY/(10000 * vol)"
variable PZZ equal "c_SZZ/(10000 * vol)"
variable PXY equal "c_SXY/(10000 * vol)"
variable PXZ equal "c_SXZ/(10000 * vol)"
variable PYZ equal "c_SYZ/(10000 * vol)"
variable Eq equal ecoul
variable qT equal c_qt

# loading rate 

variable nsteps equal 100000
print "nsteps = ${nsteps}"

variable i loop ${nsteps}
variable ubary equal 0.1

label startloop
print "Iteration = ${i}"

# ${lx}

fix def1 all print 100 "${PXX} ${PYY} ${PZZ} ${PXY} ${PXZ} ${PYZ} ${Eq} ${qT}" file tensile-log.txt screen yes
dump load all custom 100 dump.load.* id type xu yu zu q c_pe c_pep c_stress[2]

timestep        0.001
thermo	  	100
thermo_style	custom step temp press c_qt pe etotal c_prv c_prc c_SYY lx ly lz
run 0

displace_atoms bot move 0.0 -0.05 0.0 units box
displace_atoms top move 0.0 0.05 0.0  units box


fix 2 top setforce 0.0 0.0 0.0
fix 3 bot setforce 0.0 0.0 0.0
fix 4 left setforce 0.0 NULL 0.0
fix 5 right setforce 0.0 NULL 0.0

minimize 1.0e-8 10e-9 100000 1000000

undump load




next i
jump SELF startloop

